version: "2"

services:
  cloudflare:
    image: cloudflare/cloudflared:2021.11.0
    container_name: cloudflared
    restart: unless-stopped
    volumes:
      - ${BASE_DIR}/cloudflared:/etc/cloudflared
    command: tunnel --config /etc/cloudflared/config/config.yaml run
    depends_on:
      - traefik
    networks:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"
  # TODO: https://kevinquillen.com/setting-traefik-2-local-ssl-certificate
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultrule=Host(`{{ index .Labels \"com.docker.compose.service\" }}.descention.net`)"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--certificatesresolvers.letsencrypt.acme.email=scott.mundorff@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/srv/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--log.level=info"
      - "--entrypoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${BASE_DIR}/traefik/ssl:/srv
    networks:
      - web
  homebridge:
    image: oznu/homebridge:ubuntu
    restart: always
    network_mode: host
    environment:
      - PGID=100
      - PUID=1026
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8581
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BASE_DIR}/homebridge:/homebridge
  vault:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      - DOMAIN=https://vault.descention.net
      - SIGNUPS_ALLOWED=false
      - SIGNUPS_VERIFY=true
      - SMTP_HOST=${VAULT_SMTP_HOST}
      - SMTP_PORT=465
      - SMTP_SSL=false
      - SMTP_EXPLICIT_TLS=true
      - SMTP_FROM=${VAULT_SMTP_FROM}
      - SMTP_USERNAME=${VAULT_SMTP_USERNAME}
      - SMTP_PASSWORD=${VAULT_SMTP_PASSWORD}
      - SMTP_AUTH_MECHANISM=${VAULT_SMTP_AUTH_MECHANISM}
      #- ADMIN_TOKEN=${VAULT_ADMIN_TOKEN}
    volumes:
      - ${BASE_DIR}/vaultwarden-server:/data
    networks:
      - web
    labels:
      - "traefik.enable=true"

  #shinobi:
  #  image: shinobisystems/shinobi:dev
  #  container_name: Shinobi
  #  environment:
  #    - PLUGIN_KEYS="{'Tensorflow':'${TENSORFLOW_PLUGIN_KEY}''}"
  #    - SSL_ENABLED=false
  #  volumes:
  #    - ${BASE_DIR}/Shinobi/config:/config
  #    - ${BASE_DIR}/Shinobi/customAutoLoad:/home/Shinobi/libs/customAutoLoad
  #    - ${BASE_DIR}/Shinobi/database:/var/lib/mysql
  #    - ${BASE_DIR}/Shinobi/videos:/home/Shinobi/videos
  #    - ${BASE_DIR}/Shinobi/plugins:/home/Shinobi/plugins
  #    - /dev/shm/Shinobi/streams:/dev/shm/streams
  #    - /etc/localtime:/etc/localtime:ro
  #  ports:
  #    - 9123:8080
  #  restart: unless-stopped
  #shinobiplugintensorflow:
  #  image: shinobisystems/shinobi-tensorflow:latest
  #  container_name: shinobi-tensorflow
  #  environment:
  #    - PLUGIN_KEY=${TENSORFLOW_PLUGIN_KEY}
  #    - PLUGIN_HOST=Shinobi
  #  volumes:
  #    - ${BASE_DIR}/Shinobi/docker-plugins/tensorflow:/config
  #  restart: unless-stopped

  # transcode:
  #   container_name: tdarr
  #   image: ghcr.io/haveagitgat/tdarr:latest
  #   restart: unless-stopped
  #   network_mode: bridge
  #   ports:
  #     - 8265:8265 # webUI port
  #     - 8266:8266 # server port
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - UMASK_SET=002
  #     - serverIP=0.0.0.0
  #     - serverPort=8266
  #     - webUIPort=8265
  #     - internalNode=false
  #   volumes:
  #     - ${BASE_DIR}/tdarr/server:/app/server
  #     - ${BASE_DIR}/tdarr/configs:/app/configs
  #     - ${BASE_DIR}/tdarr/logs:/app/logs
  #     - /var/services/homes/scott/usbx:/media
  #     - /etc/localtime:/etc/localtime:ro
  
  # rancher:
  #   image: rancher/rancher:latest
  #   container_name: rancher
  #   privileged: true
  #   restart: unless-stopped
  #   ports:
  #     - '8889:443'
  #   volumes:
  #     - rancher-vol:/var/lib/rancher
  # ipfs:
  #   image: ipfs/go-ipfs:latest
  #   container_name: ipfs
  #   command: daemon
  #   restart: unless-stopped
  #   volumes:
  #     - ${BASE_DIR}/ipfs/data:/data/ipfs
  #     - ${BASE_DIR}/ipfs/staging:/export
  #   ports:
  #     - 4001:4001/tcp
  #     - 4001:4001/udp
  #     - 5001:5001
  #     - 8999:8080
  #   networks:
  #     - web
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.ipfs.loadbalancer.server.port=8999" # set port assignment
  
  # odoo:
  #   image: odoo:15
  #   container_name: odoo
  #   environment:
  #     - TZ=America/New_York
  #     - HOST=odoo-db
  #   volumes:
  #     - ${BASE_DIR}/odoo/data:/var/lib/odoo
  #     - ${BASE_DIR}/odoo/config:/etc/odoo
  #     - ${BASE_DIR}/odoo/addons:/mnt/extra-addons
  #   ports:
  #     - 8069:8069
  #   networks:
  #     - web
  #     - internal
  #   depends_on:
  #     - odoo-db
  #   labels:
  #     - "traefik.enable=true"
  # odoo-db:
  #   image: postgres:10
  #   container_name: odoo-db
  #   environment:
  #     - TZ=America/New_York
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=odoo
  #     - POSTGRES_PASSWORD=odoo
  #   volumes:
  #     - ${BASE_DIR}/postgres:/var/lib/postgresql/data
  #   networks:
  #     - internal
  # yacy:
  #   image: yacy/yacy_search_server:latest
  #   container_name: yacy
  #   ports:
  #     - 8090:8090
  #   volumes:
  #     - ${BASE_DIR}/yacy:/opt/yacy_search_server/DATA
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.yacy.loadbalancer.server.port=8090" # set port assignment
  #   logging:
  #     options:
  #       max-size: "200m"
  #       max-file: "2"

#  matrix:
#    image: vectorim/element-web:latest
#    container_name: element-web
#    labels:
#      - "traefik.enable=true"
# code:
#   image: gitpod/openvscode-server:latest
#   container_name: vscode
#   command: --connection-secret /home/workspace/code.secret
#   volumes:
#     - ${BASE_DIR}/scott/Source:/home/workspace:cached
#   labels:
#     - "traefik.enable=true"
# calibre:
#   image: lscr.io/linuxserver/calibre
#   container_name: calibre
#   environment:
#     - PUID=1026
#     - PGID=100
#     - TZ=America/New_York
#   #  - DOCKER_MODS=linuxserver/calibre-web:calibre
#   volumes:
#     - ${BASE_DIR}/calibre/config:/config
#   #  - ${BASE_DIR}/calibre/books:/books
#     - /etc/localtime:/etc/localtime:ro
#   restart: unless-stopped
#   ports:
#     - 8081:8081
#   labels:
#     - "traefik.enable=true"
#     - "traefik.http.services.calibre.loadbalancer.server.port=8081" # set port assignment
#  cookbook:
#    image: hkotel/mealie:latest
#    restart: always
#    container_name: mealie
#    environment:
#      PUID: 1026
#      PGID: 100
#      TZ: America/New_York
#      # Default Recipe Settings
#      RECIPE_PUBLIC: 'true'
#      RECIPE_SHOW_NUTRITION: 'true'
#      RECIPE_SHOW_ASSETS: 'true'
#      RECIPE_LANDSCAPE_VIEW: 'true'
#      RECIPE_DISABLE_COMMENTS: 'true'
#      RECIPE_DISABLE_AMOUNT: 'false'
#      # Gunicorn
#      WEB_CONCURRENCY: 2
#      # WORKERS_PER_CORE: 0.5
#      MAX_WORKERS: 4
# volumes:
#   - ${BASE_DIR}/mealie:/app/data
#   - /etc/localtime:/etc/localtime:ro
# labels:
#   - "traefik.enable=true"

  # watchtower to keep containers updated
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_ROLLING_RESTART=true
networks:
  web: {}
volumes:
  rancher-vol:
